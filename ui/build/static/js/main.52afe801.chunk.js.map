{"version":3,"sources":["shared/common/SignalRNotifications.ts","common/DurableHttpClient.ts","shared/common/Constants.ts","common/DurableEntitySet.ts","shared/CounterState.ts","App.tsx","index.tsx"],"names":["EntityStateChangedMessage","entityName","entityKey","version","stateDiff","isEntityDestructed","msg","FormatEntityId","BackendBaseUri","DurableHttpClient","_configFabric","NullLogger","instance","request","url","includes","config","this","accessTokenFactory","then","accessToken","headers","fakeUserNamePromise","fakeUserName","DefaultHttpClient","DurableEntitySet","_entityNameLowerCase","attachToAll","items","toLowerCase","makeObservable","observable","attachAllEntities","initSignalR","EntitySets","storedEntityIds","getStoredEntityIds","length","MaxEntitiesToLoadIndividually","fetchAndApplyAllEntityStates","individualPromises","map","id","Promise","resolve","nameAndKey","GetEntityNameAndKey","tryFetchingAndApplyingEntityState","entityNameLowerCase","err","Config","logger","log","LogLevel","Warning","removeStoredEntityIds","all","entityId","getEntityState","attachEntity","undefined","createEntity","signalName","argument","signalEntity","callEntity","metadata","updateEntityMetadata","initialState","existingEntity","state","makeAutoObservable","fetchAndApplyEntityState","uri","HttpClient","post","content","JSON","stringify","reject","response","correlationId","parse","SignalResultPromises","EntityStates","Object","assign","stateContainer","doNotPersistKnownEntityIds","localStorage","setItem","LocalStorageKnownIdsKey","keys","entityIdsJson","getItem","filter","removeItem","entityState","entitySet","push","i","splice","desiredVersion","currentEntityState","get","Error","applyStateChangesFrom","entityAdded","addOrUpdateEntityState","retryCount","catch","MaxRetryCount","setTimeout","RetryBaseIntervalMs","existingEntityStates","getEntityStatesCopy","item","existingStateContainer","Information","deletedEntityId","removeEntityState","entityDeleted","GetEntityId","Trace","expectedVersion","rfc6902","responsePromise","errorMessage","result","SignalRConn","HubConnectionBuilder","withUrl","httpClient","build","on","entityStateChangedMessageHandler","entitySignalResponseHandler","onclose","reconnectToSignalR","start","SignalRReconnectIntervalInMs","match","exec","incomingEntityState","diff","setup","l","console","counterState","title","countContainer","count","history","App","observer","className","onClick","n","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52afe801.chunk.js","sourcesContent":["import * as rfc6902 from 'rfc6902';\r\n\r\nexport class EntityStateChangedMessage {\r\n    \r\n    entityName: string = '';\r\n    entityKey: string = '';\r\n    version: number = 0;\r\n    stateDiff: rfc6902.Operation[] = [];\r\n    isEntityDestructed: boolean = false;\r\n\r\n    static GetEntityId(msg: EntityStateChangedMessage): string {\r\n        return EntityStateChangedMessage.FormatEntityId(msg.entityName, msg.entityKey);\r\n    }\r\n\r\n    static FormatEntityId(entityName: string, entityKey: string): string {\r\n        return `@${entityName}@${entityKey}`;\r\n    }\r\n}\r\n\r\nexport class EntitySignalResponseMessage {\r\n\r\n    entityName: string = '';\r\n    entityKey: string = '';\r\n    correlationId: string = '';\r\n    result: any;\r\n    errorMessage: string = '';\r\n}","import { DefaultHttpClient, HttpRequest, HttpResponse, NullLogger } from '@aspnet/signalr';\r\n\r\nimport { IDurableEntitySetConfig } from './IDurableEntitySetConfig';\r\nimport { ClientPrincipalHeaderName } from '../shared/common/Constants';\r\n\r\nexport const BackendBaseUri = '/a/p/i';\r\n\r\n// Custom HttpClient implementation for the purposes of DurableEntitySet\r\nexport class DurableHttpClient extends DefaultHttpClient {\r\n\r\n    constructor(private _configFabric: () => IDurableEntitySetConfig) {\r\n        super(NullLogger.instance);\r\n    }\r\n\r\n    send(request: HttpRequest): Promise<HttpResponse> {\r\n\r\n        // Applying custom config settings, but only when calling our backend\r\n\r\n        if (request.url!.includes(BackendBaseUri)) {\r\n\r\n            const config = this._configFabric();\r\n\r\n            if (!!config.accessTokenFactory) {\r\n                return config.accessTokenFactory().then(accessToken => {\r\n\r\n                    request.headers = {}\r\n                    request.headers['Authorization'] = 'Bearer ' + accessToken;\r\n\r\n                    return super.send(request);\r\n                });\r\n            }\r\n\r\n            if (!!config.fakeUserNamePromise) {\r\n                return config.fakeUserNamePromise.then(fakeUserName => {\r\n\r\n                    if (!!fakeUserName) {\r\n                        request.headers = {}\r\n                        request.headers[ClientPrincipalHeaderName] = fakeUserName;\r\n                    }\r\n\r\n                    return super.send(request);\r\n                });\r\n            }\r\n        }\r\n\r\n        return super.send(request);\r\n    }\r\n}\r\n","\r\nexport const SignalRClientHandlerName = \"entity-state-changed\";\r\n\r\nexport const SignalRSignalResponseHandlerName = \"entity-signal-response\";\r\n\r\nexport const ClientPrincipalHeaderName = 'x-ms-client-principal-name';\r\n\r\nexport const UpdateMetadataServiceMethodName = \"$update-entity-internal-metadata\";\r\n","import { makeAutoObservable, makeObservable, observable } from 'mobx';\r\nimport { HubConnectionBuilder, HubConnection, NullLogger, LogLevel } from '@aspnet/signalr';\r\nimport * as rfc6902 from 'rfc6902';\r\n\r\nimport { ISetEntityMetadataRequest } from '../shared/common/ISetEntityMetadataRequest';\r\nimport { EntityStateChangedMessage, EntitySignalResponseMessage } from '../shared/common/SignalRNotifications';\r\nimport { SignalRClientHandlerName, SignalRSignalResponseHandlerName, UpdateMetadataServiceMethodName } from '../shared/common/Constants';\r\nimport { DurableEntityClientStateContainer } from '../shared/common/DurableEntityClientStateContainer';\r\nimport { IDurableEntitySetConfig } from './IDurableEntitySetConfig';\r\nimport { DurableHttpClient, BackendBaseUri } from './DurableHttpClient';\r\n\r\nexport type EntityStateWithKey = { entityKey: string };\r\n\r\n// Client-side container for Durable Entities\r\nexport class DurableEntitySet<TState extends object> {\r\n\r\n    // All attached entities will appear in this observable array\r\n    items: (TState & EntityStateWithKey)[] = [];\r\n    \r\n    constructor(private _entityNameLowerCase: string, attachToAll: boolean = true) {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        this._entityNameLowerCase = this._entityNameLowerCase.toLowerCase();\r\n\r\n        makeObservable(this, { items: observable });\r\n        \r\n        if (attachToAll) {\r\n            this.attachAllEntities();\r\n        }\r\n    }\r\n\r\n    // Attach all entities of this type (that type you previously passed to ctor).\r\n    // Preloads all existing entities of this type and then automatically captures all newly created entities.\r\n    attachAllEntities(): Promise<void> {\r\n\r\n        DurableEntitySet.initSignalR();\r\n\r\n        // Registering ourselves as listeners for this type of entity\r\n        DurableEntitySet.EntitySets[this._entityNameLowerCase] = this.items;\r\n\r\n        // Trying to get cached entityIds from localStorage\r\n        const storedEntityIds = DurableEntitySet.getStoredEntityIds(this._entityNameLowerCase);\r\n\r\n        // If we have too many ids cached locally\r\n        if (storedEntityIds.length > DurableEntitySet.MaxEntitiesToLoadIndividually) {\r\n            \r\n            // Just loading all existing entities at once\r\n            return DurableEntitySet.fetchAndApplyAllEntityStates(this._entityNameLowerCase);\r\n        }\r\n\r\n        // First triggering parallel individual loads - this should be faster\r\n        const individualPromises = storedEntityIds.map(id => {\r\n\r\n            // Intentionally always resolves\r\n            return new Promise<void>((resolve) => {\r\n                const nameAndKey = DurableEntitySet.GetEntityNameAndKey(id);\r\n                DurableEntitySet\r\n                    .tryFetchingAndApplyingEntityState(nameAndKey.entityNameLowerCase, nameAndKey.entityKey, 0)\r\n                    .then(() => resolve(), (err) => {\r\n                        \r\n                        DurableEntitySet.Config.logger!.log(LogLevel.Warning, `DurableEntitySet: failed to fetch initial entity state: ${err}`);\r\n\r\n                        // In most cases this error indicates, that our stored entityIds are no longer valid, so we'd better drop them\r\n                        DurableEntitySet.removeStoredEntityIds(this._entityNameLowerCase);\r\n\r\n                        resolve();\r\n                    });\r\n            });\r\n        });\r\n\r\n        // After individual loads completed (no matter what the outcome is), still doing the normal mass-load\r\n        return Promise.all(individualPromises)\r\n            .then(() => DurableEntitySet.fetchAndApplyAllEntityStates(this._entityNameLowerCase));\r\n    }\r\n\r\n    // Manually attach a single entity with specific key\r\n    attachEntity(entityKey: string): void {\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(this._entityNameLowerCase, entityKey);\r\n\r\n        if (!!DurableEntitySet.getEntityState(entityId)) {\r\n            return;\r\n        }\r\n\r\n        // Registering ourselves as listeners for this particular entity\r\n        DurableEntitySet.EntitySets[entityId] = this.items;\r\n        \r\n        DurableEntitySet.attachEntity(this._entityNameLowerCase, entityKey, undefined as any);\r\n    }\r\n\r\n    // Creates (or fetches existing) an entity\r\n    createEntity(entityKey: string): void {\r\n\r\n        DurableEntitySet.createEntity(this._entityNameLowerCase, entityKey, undefined as any);\r\n    }\r\n\r\n    // Sends a signal to the given entity\r\n    signalEntity(entityKey: string, signalName: string, argument?: any): Promise<void> {\r\n\r\n        return DurableEntitySet.signalEntity(this._entityNameLowerCase, entityKey, signalName, argument);\r\n    }\r\n\r\n    // Sends a signal to the given entity and returns a promise with results\r\n    callEntity(entityKey: string, signalName: string, argument?: any): Promise<any> {\r\n\r\n        return DurableEntitySet.callEntity(this._entityNameLowerCase, entityKey, signalName, argument);\r\n    }\r\n\r\n    // Updates metadata of the given entity\r\n    updateEntityMetadata(entityKey: string, metadata: ISetEntityMetadataRequest): Promise<void> {\r\n\r\n        return DurableEntitySet.updateEntityMetadata(this._entityNameLowerCase, entityKey, metadata);\r\n    }\r\n\r\n    // Produces a single observable state instance for an existing entity\r\n    static attachEntity<TState extends object>(entityName: string, entityKey: string, initialState: TState): TState {\r\n\r\n        DurableEntitySet.initSignalR();\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        const entityNameLowerCase = entityName.toLowerCase();\r\n\r\n        const existingEntity = this.getEntityState(EntityStateChangedMessage.FormatEntityId(entityNameLowerCase, entityKey));\r\n        if (!!existingEntity) {\r\n            // If it is a known entity, then just returning it\r\n            return existingEntity.state as TState;\r\n        }\r\n\r\n        if (!!initialState) {\r\n            makeAutoObservable(initialState);\r\n        }\r\n\r\n        // Try to asynchronously retrieve the state from server\r\n        this.fetchAndApplyEntityState(entityNameLowerCase, entityKey, 0, 0, initialState);\r\n\r\n        return initialState;\r\n    }\r\n\r\n    // Creates (or fetches existing) and produces a single observable state instance for a newly created entity\r\n    static createEntity<TState extends object>(entityName: string, entityKey: string, initialState: TState): TState {\r\n\r\n        // This empty request will create the entity, if it doesn't exist yet.\r\n        this.updateEntityMetadata(entityName, entityKey, {});\r\n\r\n        return this.attachEntity(entityName, entityKey, initialState);\r\n    }\r\n\r\n    // Sends a signal to the given entity\r\n    static signalEntity(entityName: string, entityKey: string, signalName: string, argument?: any): Promise<void> {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        const entityNameLowerCase = entityName.toLowerCase();\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityNameLowerCase}/${entityKey}/${signalName}`;\r\n        return this.HttpClient.post(uri, { content: JSON.stringify(argument) }).then();\r\n    }\r\n\r\n    // Sends a signal to the given entity and returns a promise with results\r\n    static callEntity(entityName: string, entityKey: string, signalName: string, argument?: any): Promise<any> {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        const entityNameLowerCase = entityName.toLowerCase();\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityNameLowerCase}/${entityKey}/${signalName}`;\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this.HttpClient.post(uri, { content: JSON.stringify(argument) }).then(response => {\r\n\r\n                const correlationId: string = JSON.parse(response.content as string).correlationId;\r\n                this.SignalResultPromises[correlationId] = { resolve, reject };\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    // Updates metadata of the given entity\r\n    static updateEntityMetadata(entityName: string, entityKey: string, metadata: ISetEntityMetadataRequest): Promise<void> {\r\n\r\n        return this.signalEntity(entityName, entityKey, UpdateMetadataServiceMethodName, metadata);\r\n    }\r\n\r\n    // Optionally setup with these optional settings\r\n    static setup(config: IDurableEntitySetConfig): void {\r\n        this.Config = config;\r\n        if (!this.Config.logger) {\r\n            this.Config.logger = NullLogger.instance;\r\n        }\r\n    }\r\n\r\n    private static Config: IDurableEntitySetConfig = { logger: NullLogger.instance };\r\n    private static HttpClient: DurableHttpClient = new DurableHttpClient(() => DurableEntitySet.Config);\r\n    private static EntitySets: { [entityName: string]: EntityStateWithKey[] } = {};\r\n    private static SignalResultPromises: { [correlationId: string]: { resolve: (res: any) => void, reject: (err: Error) => void } } = {};\r\n\r\n    private static SignalRConn: HubConnection;\r\n\r\n    private static readonly SignalRReconnectIntervalInMs = 5000;\r\n    private static readonly MaxRetryCount = 6;\r\n    private static readonly RetryBaseIntervalMs = 500;\r\n    private static readonly MaxEntitiesToLoadIndividually = 50;\r\n\r\n    private static EntityStates: { [entityId: string]: DurableEntityClientStateContainer } = {};\r\n    private static readonly LocalStorageKnownIdsKey = 'DurableEntitySetKnownEntityIds';\r\n\r\n    private static getEntityState(entityId: string): DurableEntityClientStateContainer {\r\n        return this.EntityStates[entityId];\r\n    }\r\n\r\n    private static getEntityStatesCopy(): { [entityId: string]: DurableEntityClientStateContainer } {\r\n        return Object.assign({}, this.EntityStates);\r\n    }\r\n\r\n    private static addOrUpdateEntityState(entityId: string, stateContainer: DurableEntityClientStateContainer): void {\r\n        this.EntityStates[entityId] = stateContainer;\r\n\r\n        if (!this.Config.doNotPersistKnownEntityIds && !!localStorage) {\r\n            localStorage.setItem(this.LocalStorageKnownIdsKey, JSON.stringify(Object.keys(this.EntityStates)));\r\n        }\r\n    }\r\n\r\n    private static removeEntityState(entityId: string): void {\r\n        delete this.EntityStates[entityId];\r\n\r\n        if (!this.Config.doNotPersistKnownEntityIds && !!localStorage) {\r\n            localStorage.setItem(this.LocalStorageKnownIdsKey, JSON.stringify(Object.keys(this.EntityStates)));\r\n        }\r\n    }\r\n\r\n    private static getStoredEntityIds(entityNameLowerCase: string): string[] {\r\n\r\n        if (!!this.Config.doNotPersistKnownEntityIds || !localStorage) {\r\n            return [];\r\n        }\r\n\r\n        const entityIdsJson = localStorage.getItem(this.LocalStorageKnownIdsKey);\r\n        if (!entityIdsJson) {\r\n            return [];\r\n        }\r\n\r\n        return (JSON.parse(entityIdsJson) as string[])\r\n            .filter(id => this.GetEntityNameAndKey(id).entityNameLowerCase === entityNameLowerCase);\r\n    }\r\n\r\n    private static removeStoredEntityIds(entityNameLowerCase: string): void {\r\n        if (!!localStorage) {\r\n            localStorage.removeItem(this.LocalStorageKnownIdsKey);\r\n        }\r\n    }\r\n\r\n    private static entityAdded(entityNameLowerCase: string, entityKey: string, entityState: EntityStateWithKey) {\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(entityNameLowerCase, entityKey);\r\n\r\n        // Searching for entitySet either for this particular entity or for this type of entity\r\n        var entitySet = this.EntitySets[entityId];\r\n        if (!entitySet) {\r\n            entitySet = this.EntitySets[entityNameLowerCase];\r\n        } else {\r\n            delete this.EntitySets[entityId];\r\n        }\r\n\r\n        if (!entitySet) {\r\n            return;\r\n        }\r\n\r\n        // Adding the entityKey property to the state object, to allow binding commands\r\n        entityState.entityKey = entityKey;\r\n        entitySet.push(entityState);\r\n    }\r\n\r\n    private static entityDeleted(entityNameLowerCase: string, entityKey: string) {\r\n\r\n        const entitySet = this.EntitySets[entityNameLowerCase];\r\n        if (!entitySet) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < entitySet.length; i++) {\r\n\r\n            if (entitySet[i].entityKey === entityKey) {\r\n                entitySet.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static tryFetchingAndApplyingEntityState(entityNameLowerCase: string, entityKey: string, desiredVersion: number, currentEntityState: any = null): Promise<void> {\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityNameLowerCase}/${entityKey}`;\r\n        return this.HttpClient.get(uri).then(response => {\r\n\r\n            const stateContainer = JSON.parse(response.content as string) as DurableEntityClientStateContainer;\r\n            const entityId = EntityStateChangedMessage.FormatEntityId(entityNameLowerCase, entityKey);\r\n\r\n            if (!!desiredVersion && (stateContainer.version < desiredVersion)) {\r\n                throw new Error(`Expected ${entityId} of version ${desiredVersion}, but got version ${stateContainer.version}`);\r\n            }\r\n\r\n            if (!currentEntityState) {\r\n\r\n                // If there is no existing state, then using the newly arrived state object\r\n                currentEntityState = stateContainer.state;\r\n                makeAutoObservable(currentEntityState);\r\n                \r\n            } else {\r\n\r\n                // Otherwise applying the change to the existing object, so that UI is re-rendered\r\n                this.applyStateChangesFrom(currentEntityState, stateContainer.state);\r\n            }\r\n\r\n            if (!this.getEntityState(entityId)) {\r\n                \r\n                // Adding the newly-arrived state into collections, if any\r\n                this.entityAdded(entityNameLowerCase, entityKey, currentEntityState);\r\n            }\r\n\r\n            // (Re)registering this entity\r\n            this.addOrUpdateEntityState(entityId, { state: currentEntityState, version: stateContainer.version });\r\n        });\r\n    }\r\n\r\n    private static fetchAndApplyEntityState(entityNameLowerCase: string, entityKey: string, desiredVersion: number, retryCount: number, currentEntityState: any = null): void {\r\n\r\n        this.tryFetchingAndApplyingEntityState(entityNameLowerCase, entityKey, desiredVersion, currentEntityState).catch(err => {\r\n\r\n            if (retryCount < this.MaxRetryCount) {\r\n\r\n                // Retrying\r\n                retryCount++;\r\n                setTimeout(() => {\r\n\r\n                    this.fetchAndApplyEntityState(entityNameLowerCase, entityKey, desiredVersion, retryCount, currentEntityState);\r\n\r\n                }, retryCount * this.RetryBaseIntervalMs);\r\n                \r\n            } else {\r\n\r\n                this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to fetch entity state: ${err}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    private static fetchAndApplyAllEntityStates(entityNameLowerCase: string): Promise<void> {\r\n\r\n        // Making a shallow copy of current known states BEFORE triggering a call, \r\n        // so that if any entity is removed during the call, it doesn't re-appear.\r\n        const existingEntityStates = this.getEntityStatesCopy();\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityNameLowerCase}`;\r\n        return this.HttpClient.get(uri).then(response => {\r\n\r\n            for (var item of JSON.parse(response.content as string)) {\r\n\r\n                const entityKey = item.entityKey;\r\n                const entityId = EntityStateChangedMessage.FormatEntityId(entityNameLowerCase, entityKey);\r\n                const stateContainer = item as DurableEntityClientStateContainer;\r\n\r\n                const existingStateContainer = existingEntityStates[entityId];\r\n                delete existingEntityStates[entityId];\r\n\r\n                if (!existingStateContainer) {\r\n\r\n                    makeAutoObservable(stateContainer.state);\r\n                    this.addOrUpdateEntityState(entityId, stateContainer);\r\n\r\n                    // Adding the newly-arrived state into collections, if any\r\n                    this.entityAdded(entityNameLowerCase, entityKey, stateContainer.state as any);\r\n                    \r\n\r\n                } else if (existingStateContainer.version < stateContainer.version) {\r\n\r\n                    this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: ${entityId}, local version ${existingStateContainer.version}, remote version ${stateContainer.version}. State was updated.`);\r\n\r\n                    // Otherwise applying the change to the existing object, so that UI is re-rendered\r\n                    this.applyStateChangesFrom(existingStateContainer.state, stateContainer.state);\r\n                    existingStateContainer.version = stateContainer.version;\r\n\r\n                } else {\r\n\r\n                    this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: ${entityId} is already known and is up to date. Skipping.`);\r\n                }\r\n            }\r\n\r\n            // Dropping instances that might have appeared up to this point\r\n            for (const deletedEntityId in existingEntityStates) {\r\n\r\n                this.removeEntityState(deletedEntityId);\r\n                const nameAndKey = this.GetEntityNameAndKey(deletedEntityId);\r\n                this.entityDeleted(nameAndKey.entityNameLowerCase, nameAndKey.entityKey);\r\n            }\r\n\r\n        }).catch(err => {\r\n            this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to fetch entity states: ${err}`);\r\n        });\r\n    }\r\n\r\n    private static entityStateChangedMessageHandler(msg: EntityStateChangedMessage): void {\r\n\r\n        const entityId = EntityStateChangedMessage.GetEntityId(msg);\r\n\r\n        this.Config.logger!.log(LogLevel.Trace, `DurableEntitySet: ${entityId} changed to version ${msg.version}`);\r\n\r\n        const existingStateContainer = this.getEntityState(entityId);\r\n        if (msg.isEntityDestructed) {\r\n\r\n            this.removeEntityState(entityId);\r\n\r\n            this.entityDeleted(msg.entityName, msg.entityKey);\r\n\r\n        } else if (!existingStateContainer) {\r\n\r\n            // If anybody is attached to this entity or this type of entity\r\n            if (!!this.EntitySets[entityId] || !!this.EntitySets[msg.entityName]) {\r\n                \r\n                // This entity is not known to us yet, so just trying to fetch its state from server\r\n                setTimeout(() => this.fetchAndApplyEntityState(msg.entityName, msg.entityKey, msg.version, 0), this.RetryBaseIntervalMs);\r\n            }\r\n           \r\n        } else {\r\n\r\n            const expectedVersion = existingStateContainer.version + 1;\r\n            if (msg.version > expectedVersion) {\r\n                \r\n                // Missed some updates, so now need to reload the state from server\r\n                this.fetchAndApplyEntityState(msg.entityName, msg.entityKey, msg.version, 0, existingStateContainer.state);\r\n\r\n            } else if (msg.version === expectedVersion) {\r\n\r\n                // Applying the change\r\n                rfc6902.applyPatch(existingStateContainer.state, msg.stateDiff);\r\n                existingStateContainer.version = msg.version;\r\n            }            \r\n        }\r\n    }\r\n\r\n    private static entitySignalResponseHandler(msg: EntitySignalResponseMessage): void {\r\n\r\n        const responsePromise = this.SignalResultPromises[msg.correlationId];\r\n        if (!responsePromise) {\r\n            return;\r\n        }\r\n\r\n        if (!msg.errorMessage) {\r\n            responsePromise.resolve(msg.result);\r\n        } else {\r\n            responsePromise.reject(new Error(msg.errorMessage));\r\n        }\r\n\r\n        delete this.SignalResultPromises[msg.correlationId];\r\n    }\r\n\r\n    private static initSignalR(): void {\r\n\r\n        if (!!this.SignalRConn) {\r\n            return;\r\n        }\r\n\r\n        // Configuring SignalR\r\n        this.SignalRConn = new HubConnectionBuilder()\r\n            .withUrl(`${BackendBaseUri}`, { httpClient: this.HttpClient, logger: this.Config.logger })\r\n            .build();\r\n\r\n        // Mounting event handlers\r\n        this.SignalRConn.on(SignalRClientHandlerName, msg => this.entityStateChangedMessageHandler(msg));\r\n        this.SignalRConn.on(SignalRSignalResponseHandlerName, msg => this.entitySignalResponseHandler(msg));\r\n\r\n        // Background reconnects are essential here. That's because in 'Default' or 'Classic' service mode\r\n        // clients get forcibly disconnected, when your backend restarts.\r\n        this.SignalRConn.onclose(() => this.reconnectToSignalR());\r\n\r\n        // Establishing SignalR connection\r\n        this.SignalRConn.start().then(\r\n            () => {\r\n                this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: successfully connected to SignalR`);\r\n            }, err => {\r\n                this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to connect to SignalR: ${err}`);\r\n            });\r\n    }\r\n\r\n    private static reconnectToSignalR() {\r\n\r\n        this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: reconnecting to SignalR...`);\r\n        this.SignalRConn.start().then(() => {\r\n            this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: reconnected to SignalR`);\r\n        }, () => {\r\n            setTimeout(() => this.reconnectToSignalR(), this.SignalRReconnectIntervalInMs);\r\n        });\r\n    }\r\n\r\n    static GetEntityNameAndKey(entityId: string): { entityNameLowerCase: string, entityKey: string } {\r\n        \r\n        const match = /@([^@]+)@(.+)/.exec(entityId);\r\n        return { entityNameLowerCase: !match ? '' : match[1], entityKey: !match ? '' : match[2] };\r\n    }\r\n\r\n    // Applies incoming changes to an existing observable object so, that UI is re-rendered\r\n    private static applyStateChangesFrom(currentEntityState: any, incomingEntityState: any): void {\r\n\r\n        // Need to preserve the entityKey field, if it is set\r\n        incomingEntityState.entityKey = currentEntityState.entityKey;\r\n\r\n        const diff = rfc6902.createPatch(currentEntityState, incomingEntityState);\r\n        rfc6902.applyPatch(currentEntityState, diff);\r\n    }\r\n}","\r\n// Sample entity state\r\nexport class CounterState\r\n{\r\n    title: string = '';\r\n\r\n    countContainer = {\r\n        count: 0\r\n    }\r\n\r\n    history: number[] = [];\r\n}","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { DurableEntitySet } from './common/DurableEntitySet';\r\nimport { CounterState } from './shared/CounterState';\r\n\r\n// Optional setup\r\nDurableEntitySet.setup({\r\n\r\n    // Setup with some fake user name. This is for testing purposes only.\r\n    // When deployed to Azure with EasyAuth configured, this name will be replaced with your real user name.\r\n    fakeUserNamePromise: Promise.resolve('test-anonymous-user'),\r\n\r\n    logger: { log: (l, msg: string) => console.log(msg) }\r\n});\r\n\r\nconst entityName = 'CounterEntity';\r\nconst entityKey = 'my-counter';\r\n\r\n// Creating a single CounterEntity and binding to its state\r\nconst counterState = DurableEntitySet.createEntity(entityName, entityKey, new CounterState());\r\n\r\n// Rendering that entity state\r\nexport const App = observer(\r\n    class App extends React.Component {\r\n        render(): JSX.Element {\r\n            return (<>\r\n                <div className=\"counter-div\">\r\n                    <h3> Title: '{counterState.title}', count: {counterState.countContainer?.count}</h3>\r\n                    <button onClick={() => DurableEntitySet.signalEntity(entityName, entityKey, 'add', 1)}>\r\n                        Increment\r\n                    </button>\r\n                    <button onClick={() => DurableEntitySet.signalEntity(entityName, entityKey, 'substract', 1)}>\r\n                        Decrement\r\n                    </button>\r\n                </div>\r\n                <h4>{counterState.history.length ? 'History (last 10 values):' : ''}</h4>\r\n                <ul>\r\n                    {counterState.history.map(n => (<li>{n}</li>))}\r\n                </ul>\r\n            </>);\r\n        }\r\n    }\r\n);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}