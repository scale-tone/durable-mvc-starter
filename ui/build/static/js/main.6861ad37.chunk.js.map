{"version":3,"sources":["shared/common/SignalRNotifications.ts","shared/common/DurableEntityClientStateContainer.ts","common/DurableHttpClient.ts","shared/common/Constants.ts","common/EntityStateMap.ts","common/DurableEntitySet.ts","shared/CounterState.ts","App.tsx","index.tsx"],"names":["EntityStateChangedMessage","entityName","entityKey","version","stateDiff","isEntityDestructed","msg","FormatEntityId","DurableEntityClientStateContainer","state","entityId","match","exec","entityNameLowerCase","BackendBaseUri","DurableHttpClient","_configFabric","NullLogger","instance","request","url","includes","config","this","accessTokenFactory","then","accessToken","headers","fakeUserNamePromise","fakeUserName","DefaultHttpClient","EntityStateMap","_maxKnownEntityIdsToPersist","States","LocalStorageKnownIdsKey","Object","assign","stateContainer","localStorage","entityIds","keys","slice","setItem","JSON","stringify","entityIdsJson","getItem","parse","filter","id","GetEntityNameAndKey","removeItem","DurableEntitySet","attachToAll","items","_entityNameLowerCase","toLowerCase","makeObservable","observable","attachAllEntities","initSignalR","EntitySets","fetchAndApplyKnownEntityStates","fetchAndApplyAllEntityStates","EntityStates","getState","attachEntity","undefined","createEntity","signalName","argument","signalEntity","callEntity","metadata","updateEntityMetadata","initialState","existingEntity","makeAutoObservable","fetchAndApplyEntityState","uri","encodeURI","HttpClient","post","content","Promise","resolve","reject","response","correlationId","SignalResultPromises","Config","logger","entityState","entitySet","push","i","length","splice","desiredVersion","retryCount","currentEntityState","get","Error","applyStateChangesFrom","entityAdded","addOrUpdateState","catch","err","MaxRetryCount","setTimeout","RetryBaseIntervalMs","log","LogLevel","existingEntityStates","getStatesCopy","item","existingStateContainer","Information","deletedEntityId","removeState","nameAndKey","entityDeleted","getStoredEntityIds","stateContainers","Warning","removeStoredEntityIds","GetEntityId","Trace","expectedVersion","rfc6902","responsePromise","errorMessage","result","SignalRConn","HubConnectionBuilder","withUrl","httpClient","build","on","entityStateChangedMessageHandler","entitySignalResponseHandler","onclose","reconnectToSignalR","start","SignalRReconnectIntervalInMs","incomingEntityState","diff","DefaultMaxKnownEntityIdsToPersist","maxKnownEntityIdsToPersist","setup","l","console","counterState","title","countContainer","count","history","App","observer","className","onClick","map","n","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6861ad37.chunk.js","sourcesContent":["import * as rfc6902 from 'rfc6902';\r\n\r\nexport class EntityStateChangedMessage {\r\n    \r\n    entityName: string = '';\r\n    entityKey: string = '';\r\n    version: number = 0;\r\n    stateDiff: rfc6902.Operation[] = [];\r\n    isEntityDestructed: boolean = false;\r\n\r\n    static GetEntityId(msg: EntityStateChangedMessage): string {\r\n        return EntityStateChangedMessage.FormatEntityId(msg.entityName, msg.entityKey);\r\n    }\r\n\r\n    static FormatEntityId(entityName: string, entityKey: string): string {\r\n        return `@${entityName}@${entityKey}`;\r\n    }\r\n}\r\n\r\nexport class EntitySignalResponseMessage {\r\n\r\n    entityName: string = '';\r\n    entityKey: string = '';\r\n    correlationId: string = '';\r\n    result: any;\r\n    errorMessage: string = '';\r\n}","\r\n// A client-side wrapper around entity's state, with some extra metadata added\r\nexport class DurableEntityClientStateContainer {\r\n\r\n    version: number = 0;\r\n    state: object = {};\r\n\r\n    // Helper method for parsing entityIds\r\n    public static GetEntityNameAndKey(entityId: string): { entityNameLowerCase: string, entityKey: string } {\r\n        \r\n        const match = /@([^@]+)@(.+)/.exec(entityId);\r\n        return { entityNameLowerCase: !match ? '' : match[1], entityKey: !match ? '' : match[2] };\r\n    }\r\n}","import { DefaultHttpClient, HttpRequest, HttpResponse, NullLogger } from '@aspnet/signalr';\r\n\r\nimport { IDurableEntitySetConfig } from './IDurableEntitySetConfig';\r\nimport { ClientPrincipalHeaderName } from '../shared/common/Constants';\r\n\r\nexport const BackendBaseUri = '/a/p/i';\r\n\r\n// Custom HttpClient implementation for the purposes of DurableEntitySet\r\nexport class DurableHttpClient extends DefaultHttpClient {\r\n\r\n    constructor(private _configFabric: () => IDurableEntitySetConfig) {\r\n        super(NullLogger.instance);\r\n    }\r\n\r\n    send(request: HttpRequest): Promise<HttpResponse> {\r\n\r\n        // Applying custom config settings, but only when calling our backend\r\n\r\n        if (request.url!.includes(BackendBaseUri)) {\r\n\r\n            const config = this._configFabric();\r\n\r\n            if (!!config.accessTokenFactory) {\r\n                return config.accessTokenFactory().then(accessToken => {\r\n\r\n                    request.headers = {}\r\n                    request.headers['Authorization'] = 'Bearer ' + accessToken;\r\n\r\n                    return super.send(request);\r\n                });\r\n            }\r\n\r\n            if (!!config.fakeUserNamePromise) {\r\n                return config.fakeUserNamePromise.then(fakeUserName => {\r\n\r\n                    if (!!fakeUserName) {\r\n                        request.headers = {}\r\n                        request.headers[ClientPrincipalHeaderName] = fakeUserName;\r\n                    }\r\n\r\n                    return super.send(request);\r\n                });\r\n            }\r\n        }\r\n\r\n        return super.send(request);\r\n    }\r\n}\r\n","\r\nexport const SignalRClientHandlerName = \"entity-state-changed\";\r\n\r\nexport const SignalRSignalResponseHandlerName = \"entity-signal-response\";\r\n\r\nexport const ClientPrincipalHeaderName = 'x-ms-client-principal-name';\r\n\r\nexport const UpdateMetadataServiceMethodName = \"$update-entity-internal-metadata\";\r\n","import { DurableEntityClientStateContainer } from '../shared/common/DurableEntityClientStateContainer';\r\n\r\n// Map-like storage for all known entity states\r\nexport class EntityStateMap {\r\n\r\n    constructor(private _maxKnownEntityIdsToPersist: () => number) {\r\n    }\r\n\r\n    public getState(entityId: string): DurableEntityClientStateContainer {\r\n        return this.States[entityId];\r\n    }\r\n\r\n    public getStatesCopy(): { [entityId: string]: DurableEntityClientStateContainer } {\r\n        return Object.assign({}, this.States);\r\n    }\r\n\r\n    public addOrUpdateState(entityId: string, stateContainer: DurableEntityClientStateContainer): void {\r\n        this.States[entityId] = stateContainer;\r\n\r\n        if (!!localStorage) {\r\n\r\n            const entityIds = Object.keys(this.States).slice(0, this._maxKnownEntityIdsToPersist());\r\n            localStorage.setItem(this.LocalStorageKnownIdsKey, JSON.stringify(entityIds));\r\n        }\r\n    }\r\n\r\n    public removeState(entityId: string): void {\r\n        delete this.States[entityId];\r\n\r\n        if (!!localStorage) {\r\n\r\n            const entityIds = Object.keys(this.States).slice(0, this._maxKnownEntityIdsToPersist());\r\n            localStorage.setItem(this.LocalStorageKnownIdsKey, JSON.stringify(entityIds));\r\n        }\r\n    }\r\n\r\n    public getStoredEntityIds(entityNameLowerCase: string): string[] {\r\n\r\n        if (!localStorage) {\r\n            return [];\r\n        }\r\n\r\n        const entityIdsJson = localStorage.getItem(this.LocalStorageKnownIdsKey);\r\n        if (!entityIdsJson) {\r\n            return [];\r\n        }\r\n\r\n        return (JSON.parse(entityIdsJson) as string[])\r\n            .filter(id => DurableEntityClientStateContainer.GetEntityNameAndKey(id).entityNameLowerCase === entityNameLowerCase);\r\n    }\r\n\r\n    public removeStoredEntityIds(entityNameLowerCase: string): void {\r\n        if (!!localStorage) {\r\n            localStorage.removeItem(this.LocalStorageKnownIdsKey);\r\n        }\r\n    }\r\n\r\n    private States: { [entityId: string]: DurableEntityClientStateContainer } = {};\r\n    private readonly LocalStorageKnownIdsKey = 'DurableEntitySetKnownEntityIds';\r\n}","import { makeAutoObservable, makeObservable, observable } from 'mobx';\r\nimport { HubConnectionBuilder, HubConnection, NullLogger, LogLevel } from '@aspnet/signalr';\r\nimport * as rfc6902 from 'rfc6902';\r\n\r\nimport { ISetEntityMetadataRequest } from '../shared/common/ISetEntityMetadataRequest';\r\nimport { EntityStateChangedMessage, EntitySignalResponseMessage } from '../shared/common/SignalRNotifications';\r\nimport { SignalRClientHandlerName, SignalRSignalResponseHandlerName, UpdateMetadataServiceMethodName } from '../shared/common/Constants';\r\nimport { DurableEntityClientStateContainer } from '../shared/common/DurableEntityClientStateContainer';\r\nimport { IDurableEntitySetConfig } from './IDurableEntitySetConfig';\r\nimport { DurableHttpClient, BackendBaseUri } from './DurableHttpClient';\r\nimport { EntityStateMap } from './EntityStateMap';\r\n\r\nexport type EntityStateWithKey = { entityKey: string };\r\n\r\n// Client-side container for Durable Entities\r\nexport class DurableEntitySet<TState extends object> {\r\n\r\n    // All attached entities will appear in this observable array\r\n    items: (TState & EntityStateWithKey)[] = [];\r\n    \r\n    constructor(entityName: string, attachToAll: boolean = true) {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        this._entityNameLowerCase = entityName.toLowerCase();\r\n\r\n        makeObservable(this, { items: observable });\r\n        \r\n        if (attachToAll) {\r\n            this.attachAllEntities();\r\n        }\r\n    }\r\n\r\n    // Attach all entities of this type (that type you previously passed to ctor).\r\n    // Preloads all existing entities of this type and then automatically captures all newly created entities.\r\n    attachAllEntities(): Promise<void> {\r\n\r\n        DurableEntitySet.initSignalR();\r\n\r\n        // Registering ourselves as listeners for this type of entity\r\n        DurableEntitySet.EntitySets[this._entityNameLowerCase] = this.items;\r\n\r\n        // First trying to fetch states for stored entityIds\r\n        return DurableEntitySet.fetchAndApplyKnownEntityStates(this._entityNameLowerCase)\r\n            // Then still always doing a mass-load, because some entities might be added/removed during the offline period\r\n            .then(() => DurableEntitySet.fetchAndApplyAllEntityStates(this._entityNameLowerCase));\r\n    }\r\n\r\n    // Manually attach a single entity with specific key\r\n    attachEntity(entityKey: string): void {\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(this._entityNameLowerCase, entityKey);\r\n\r\n        if (!!DurableEntitySet.EntityStates.getState(entityId)) {\r\n            return;\r\n        }\r\n\r\n        // Registering ourselves as listeners for this particular entity\r\n        DurableEntitySet.EntitySets[entityId] = this.items;\r\n        \r\n        DurableEntitySet.attachEntity(this._entityNameLowerCase, entityKey, undefined as any);\r\n    }\r\n\r\n    // Creates (or fetches existing) an entity\r\n    createEntity(entityKey: string): void {\r\n\r\n        DurableEntitySet.createEntity(this._entityNameLowerCase, entityKey, undefined as any);\r\n    }\r\n\r\n    // Sends a signal to the given entity\r\n    signalEntity(entityKey: string, signalName: string, argument?: any): Promise<void> {\r\n\r\n        return DurableEntitySet.signalEntity(this._entityNameLowerCase, entityKey, signalName, argument);\r\n    }\r\n\r\n    // Sends a signal to the given entity and returns a promise with results\r\n    callEntity(entityKey: string, signalName: string, argument?: any): Promise<any> {\r\n\r\n        return DurableEntitySet.callEntity(this._entityNameLowerCase, entityKey, signalName, argument);\r\n    }\r\n\r\n    // Updates metadata of the given entity\r\n    updateEntityMetadata(entityKey: string, metadata: ISetEntityMetadataRequest): Promise<void> {\r\n\r\n        return DurableEntitySet.updateEntityMetadata(this._entityNameLowerCase, entityKey, metadata);\r\n    }\r\n\r\n    // Lower-cased entity class name\r\n    private readonly _entityNameLowerCase: string;\r\n\r\n    // Produces a single observable state instance for an existing entity\r\n    static attachEntity<TState extends object>(entityName: string, entityKey: string, initialState: TState): TState {\r\n\r\n        DurableEntitySet.initSignalR();\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        const entityNameLowerCase = entityName.toLowerCase();\r\n\r\n        const existingEntity = this.EntityStates.getState(EntityStateChangedMessage.FormatEntityId(entityNameLowerCase, entityKey));\r\n        if (!!existingEntity) {\r\n            // If it is a known entity, then just returning it\r\n            return existingEntity.state as TState;\r\n        }\r\n\r\n        if (!!initialState) {\r\n            makeAutoObservable(initialState);\r\n        }\r\n\r\n        // Try to asynchronously retrieve the state from server\r\n        this.fetchAndApplyEntityState(entityNameLowerCase, entityKey, 0, 0, initialState);\r\n\r\n        return initialState;\r\n    }\r\n\r\n    // Creates (or fetches existing) and produces a single observable state instance for a newly created entity\r\n    static createEntity<TState extends object>(entityName: string, entityKey: string, initialState: TState): TState {\r\n\r\n        // This empty request will create the entity, if it doesn't exist yet.\r\n        this.updateEntityMetadata(entityName, entityKey, {});\r\n\r\n        return this.attachEntity(entityName, entityKey, initialState);\r\n    }\r\n\r\n    // Sends a signal to the given entity\r\n    static signalEntity(entityName: string, entityKey: string, signalName: string, argument?: any): Promise<void> {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        const entityNameLowerCase = entityName.toLowerCase();\r\n\r\n        const uri = `${BackendBaseUri}/entities/${encodeURI(entityNameLowerCase)}/${encodeURI(entityKey)}/${encodeURI(signalName)}`;\r\n        return this.HttpClient.post(uri, { content: JSON.stringify(argument) }).then();\r\n    }\r\n\r\n    // Sends a signal to the given entity and returns a promise with results\r\n    static callEntity(entityName: string, entityKey: string, signalName: string, argument?: any): Promise<any> {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        const entityNameLowerCase = entityName.toLowerCase();\r\n\r\n        const uri = `${BackendBaseUri}/entities/${encodeURI(entityNameLowerCase)}/${encodeURI(entityKey)}/${encodeURI(signalName)}`;\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this.HttpClient.post(uri, { content: JSON.stringify(argument) }).then(response => {\r\n\r\n                const correlationId: string = JSON.parse(response.content as string).correlationId;\r\n                this.SignalResultPromises[correlationId] = { resolve, reject };\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    // Updates metadata of the given entity\r\n    static updateEntityMetadata(entityName: string, entityKey: string, metadata: ISetEntityMetadataRequest): Promise<void> {\r\n\r\n        return this.signalEntity(entityName, entityKey, UpdateMetadataServiceMethodName, metadata);\r\n    }\r\n\r\n    // Optionally setup with these optional settings\r\n    static setup(config: IDurableEntitySetConfig): void {\r\n        this.Config = config;\r\n        if (!this.Config.logger) {\r\n            this.Config.logger = NullLogger.instance;\r\n        }\r\n    }\r\n\r\n    private static Config: IDurableEntitySetConfig = { logger: NullLogger.instance };\r\n    private static HttpClient: DurableHttpClient = new DurableHttpClient(() => DurableEntitySet.Config);\r\n    private static EntitySets: { [entityName: string]: EntityStateWithKey[] } = {};\r\n    private static SignalResultPromises: { [correlationId: string]: { resolve: (res: any) => void, reject: (err: Error) => void } } = {};\r\n\r\n    private static SignalRConn: HubConnection;\r\n\r\n    private static readonly SignalRReconnectIntervalInMs = 5000;\r\n    private static readonly MaxRetryCount = 6;\r\n    private static readonly RetryBaseIntervalMs = 500;\r\n    private static readonly DefaultMaxKnownEntityIdsToPersist = 100;\r\n\r\n    private static EntityStates = new EntityStateMap(() =>\r\n        DurableEntitySet.Config.maxKnownEntityIdsToPersist === undefined ?\r\n            DurableEntitySet.DefaultMaxKnownEntityIdsToPersist :\r\n            DurableEntitySet.Config.maxKnownEntityIdsToPersist\r\n    );\r\n\r\n    private static entityAdded(entityNameLowerCase: string, entityKey: string, entityState: EntityStateWithKey) {\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(entityNameLowerCase, entityKey);\r\n\r\n        // Searching for entitySet either for this particular entity or for this type of entity\r\n        var entitySet = this.EntitySets[entityId];\r\n        if (!entitySet) {\r\n            entitySet = this.EntitySets[entityNameLowerCase];\r\n        } else {\r\n            delete this.EntitySets[entityId];\r\n        }\r\n\r\n        if (!entitySet) {\r\n            return;\r\n        }\r\n\r\n        // Adding the entityKey property to the state object, to allow binding commands\r\n        entityState.entityKey = entityKey;\r\n        entitySet.push(entityState);\r\n    }\r\n\r\n    private static entityDeleted(entityNameLowerCase: string, entityKey: string) {\r\n\r\n        const entitySet = this.EntitySets[entityNameLowerCase];\r\n        if (!entitySet) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < entitySet.length; i++) {\r\n\r\n            if (entitySet[i].entityKey === entityKey) {\r\n                entitySet.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static fetchAndApplyEntityState(entityNameLowerCase: string, entityKey: string, desiredVersion: number, retryCount: number, currentEntityState: any = null): void {\r\n\r\n        const uri = `${BackendBaseUri}/entities/${encodeURI(entityNameLowerCase)}/${encodeURI(entityKey)}`;\r\n        this.HttpClient.get(uri).then(response => {\r\n\r\n            const stateContainer = JSON.parse(response.content as string) as DurableEntityClientStateContainer;\r\n            const entityId = EntityStateChangedMessage.FormatEntityId(entityNameLowerCase, entityKey);\r\n\r\n            if (!!desiredVersion && (stateContainer.version < desiredVersion)) {\r\n                throw new Error(`Expected ${entityId} of version ${desiredVersion}, but got version ${stateContainer.version}`);\r\n            }\r\n\r\n            if (!currentEntityState) {\r\n\r\n                // If there is no existing state, then using the newly arrived state object\r\n                currentEntityState = stateContainer.state;\r\n                makeAutoObservable(currentEntityState);\r\n                \r\n            } else {\r\n\r\n                // Otherwise applying the change to the existing object, so that UI is re-rendered\r\n                this.applyStateChangesFrom(currentEntityState, stateContainer.state);\r\n            }\r\n\r\n            if (!this.EntityStates.getState(entityId)) {\r\n                \r\n                // Adding the newly-arrived state into collections, if any\r\n                this.entityAdded(entityNameLowerCase, entityKey, currentEntityState);\r\n            }\r\n\r\n            // (Re)registering this entity\r\n            this.EntityStates.addOrUpdateState(entityId, { state: currentEntityState, version: stateContainer.version });\r\n\r\n        }).catch(err => {\r\n\r\n            if (retryCount < this.MaxRetryCount) {\r\n\r\n                // Retrying\r\n                retryCount++;\r\n                setTimeout(() => {\r\n\r\n                    this.fetchAndApplyEntityState(entityNameLowerCase, entityKey, desiredVersion, retryCount, currentEntityState);\r\n\r\n                }, retryCount * this.RetryBaseIntervalMs);\r\n                \r\n            } else {\r\n\r\n                this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to fetch entity state: ${err}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    private static fetchAndApplyAllEntityStates(entityNameLowerCase: string): Promise<void> {\r\n\r\n        // Making a shallow copy of current known states BEFORE triggering a call, \r\n        // so that if any entity is removed during the call, it doesn't re-appear.\r\n        const existingEntityStates = this.EntityStates.getStatesCopy();\r\n\r\n        const uri = `${BackendBaseUri}/entities/${encodeURI(entityNameLowerCase)}`;\r\n        return this.HttpClient.get(uri).then(response => {\r\n\r\n            for (var item of JSON.parse(response.content as string)) {\r\n\r\n                const entityKey = item.entityKey;\r\n                const entityId = EntityStateChangedMessage.FormatEntityId(entityNameLowerCase, entityKey);\r\n                const stateContainer = item as DurableEntityClientStateContainer;\r\n\r\n                const existingStateContainer = existingEntityStates[entityId];\r\n                delete existingEntityStates[entityId];\r\n\r\n                if (!existingStateContainer) {\r\n\r\n                    makeAutoObservable(stateContainer.state);\r\n                    this.EntityStates.addOrUpdateState(entityId, stateContainer);\r\n\r\n                    // Adding the newly-arrived state into collections, if any\r\n                    this.entityAdded(entityNameLowerCase, entityKey, stateContainer.state as any);\r\n                    \r\n\r\n                } else if (existingStateContainer.version < stateContainer.version) {\r\n\r\n                    this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: ${entityId}, local version ${existingStateContainer.version}, remote version ${stateContainer.version}. State was updated.`);\r\n\r\n                    // Otherwise applying the change to the existing object, so that UI is re-rendered\r\n                    this.applyStateChangesFrom(existingStateContainer.state, stateContainer.state);\r\n                    existingStateContainer.version = stateContainer.version;\r\n\r\n                } else {\r\n\r\n                    this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: ${entityId} is already known and is up to date. Skipping.`);\r\n                }\r\n            }\r\n\r\n            // Dropping instances that might have appeared up to this point\r\n            for (const deletedEntityId in existingEntityStates) {\r\n\r\n                this.EntityStates.removeState(deletedEntityId);\r\n                const nameAndKey = DurableEntityClientStateContainer.GetEntityNameAndKey(deletedEntityId);\r\n                this.entityDeleted(nameAndKey.entityNameLowerCase, nameAndKey.entityKey);\r\n            }\r\n\r\n        }).catch(err => {\r\n            this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to fetch entity states: ${err}`);\r\n        });\r\n    }\r\n\r\n    private static fetchAndApplyKnownEntityStates(entityNameLowerCase: string): Promise<void> {\r\n\r\n        const entityIds = this.EntityStates.getStoredEntityIds(entityNameLowerCase);\r\n\r\n        // Making a shallow copy of current known states BEFORE triggering a call, \r\n        // so that if any entity is removed during the call, it doesn't re-appear.\r\n        const existingEntityStates = this.EntityStates.getStatesCopy();\r\n\r\n        const uri = `${BackendBaseUri}/entities`;\r\n        return this.HttpClient.post(uri, { content: JSON.stringify(entityIds) }).then(response => {\r\n\r\n            const stateContainers = JSON.parse(response.content as string) as DurableEntityClientStateContainer[];\r\n\r\n            for (var i = 0; i < entityIds.length; i++) {\r\n\r\n                const entityId = entityIds[i];\r\n                const nameAndKey = DurableEntityClientStateContainer.GetEntityNameAndKey(entityId);\r\n                const stateContainer = stateContainers[i];\r\n\r\n                const existingStateContainer = existingEntityStates[entityId];\r\n                if (!existingStateContainer) {\r\n\r\n                    makeAutoObservable(stateContainer.state);\r\n                    this.EntityStates.addOrUpdateState(entityId, stateContainer);\r\n\r\n                    // Adding the newly-arrived state into collections, if any\r\n                    this.entityAdded(nameAndKey.entityNameLowerCase, nameAndKey.entityKey, stateContainer.state as any);\r\n                    \r\n\r\n                } else if (existingStateContainer.version < stateContainer.version) {\r\n\r\n                    this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: ${entityId}, local version ${existingStateContainer.version}, remote version ${stateContainer.version}. State was updated.`);\r\n\r\n                    // Otherwise applying the change to the existing object, so that UI is re-rendered\r\n                    this.applyStateChangesFrom(existingStateContainer.state, stateContainer.state);\r\n                    existingStateContainer.version = stateContainer.version;\r\n\r\n                } else {\r\n\r\n                    this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: ${entityId} is already known and is up to date. Skipping.`);\r\n                }\r\n            }\r\n\r\n        }).catch(err => {\r\n\r\n            this.Config.logger!.log(LogLevel.Warning, `DurableEntitySet: failed to fetch known entity states: ${err}`);\r\n\r\n            // In most cases this error indicates, that our stored entityIds are no longer valid, so we'd better drop them\r\n            this.EntityStates.removeStoredEntityIds(entityNameLowerCase);\r\n        });\r\n    }\r\n    \r\n    private static entityStateChangedMessageHandler(msg: EntityStateChangedMessage): void {\r\n\r\n        const entityId = EntityStateChangedMessage.GetEntityId(msg);\r\n\r\n        this.Config.logger!.log(LogLevel.Trace, `DurableEntitySet: ${entityId} changed to version ${msg.version}`);\r\n\r\n        const existingStateContainer = this.EntityStates.getState(entityId);\r\n        if (msg.isEntityDestructed) {\r\n\r\n            this.EntityStates.removeState(entityId);\r\n\r\n            this.entityDeleted(msg.entityName, msg.entityKey);\r\n\r\n        } else if (!existingStateContainer) {\r\n\r\n            // If anybody is attached to this entity or this type of entity\r\n            if (!!this.EntitySets[entityId] || !!this.EntitySets[msg.entityName]) {\r\n                \r\n                // This entity is not known to us yet, so just trying to fetch its state from server\r\n                setTimeout(() => this.fetchAndApplyEntityState(msg.entityName, msg.entityKey, msg.version, 0), this.RetryBaseIntervalMs);\r\n            }\r\n           \r\n        } else {\r\n\r\n            const expectedVersion = existingStateContainer.version + 1;\r\n            if (msg.version > expectedVersion) {\r\n                \r\n                // Missed some updates, so now need to reload the state from server\r\n                this.fetchAndApplyEntityState(msg.entityName, msg.entityKey, msg.version, 0, existingStateContainer.state);\r\n\r\n            } else if (msg.version === expectedVersion) {\r\n\r\n                // Applying the change\r\n                rfc6902.applyPatch(existingStateContainer.state, msg.stateDiff);\r\n                existingStateContainer.version = msg.version;\r\n            }            \r\n        }\r\n    }\r\n\r\n    private static entitySignalResponseHandler(msg: EntitySignalResponseMessage): void {\r\n\r\n        const responsePromise = this.SignalResultPromises[msg.correlationId];\r\n        if (!responsePromise) {\r\n            return;\r\n        }\r\n\r\n        if (!msg.errorMessage) {\r\n            responsePromise.resolve(msg.result);\r\n        } else {\r\n            responsePromise.reject(new Error(msg.errorMessage));\r\n        }\r\n\r\n        delete this.SignalResultPromises[msg.correlationId];\r\n    }\r\n\r\n    private static initSignalR(): void {\r\n\r\n        if (!!this.SignalRConn) {\r\n            return;\r\n        }\r\n\r\n        // Configuring SignalR\r\n        this.SignalRConn = new HubConnectionBuilder()\r\n            .withUrl(`${BackendBaseUri}`, { httpClient: this.HttpClient, logger: this.Config.logger })\r\n            .build();\r\n\r\n        // Mounting event handlers\r\n        this.SignalRConn.on(SignalRClientHandlerName, msg => this.entityStateChangedMessageHandler(msg));\r\n        this.SignalRConn.on(SignalRSignalResponseHandlerName, msg => this.entitySignalResponseHandler(msg));\r\n\r\n        // Background reconnects are essential here. That's because in 'Default' or 'Classic' service mode\r\n        // clients get forcibly disconnected, when your backend restarts.\r\n        this.SignalRConn.onclose(() => this.reconnectToSignalR());\r\n\r\n        // Establishing SignalR connection\r\n        this.SignalRConn.start().then(\r\n            () => {\r\n                this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: successfully connected to SignalR`);\r\n            }, err => {\r\n                this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to connect to SignalR: ${err}`);\r\n            });\r\n    }\r\n\r\n    private static reconnectToSignalR() {\r\n\r\n        this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: reconnecting to SignalR...`);\r\n        this.SignalRConn.start().then(() => {\r\n            this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: reconnected to SignalR`);\r\n        }, () => {\r\n            setTimeout(() => this.reconnectToSignalR(), this.SignalRReconnectIntervalInMs);\r\n        });\r\n    }\r\n\r\n    // Applies incoming changes to an existing observable object so, that UI is re-rendered\r\n    private static applyStateChangesFrom(currentEntityState: any, incomingEntityState: any): void {\r\n\r\n        // Need to preserve the entityKey field, if it is set\r\n        incomingEntityState.entityKey = currentEntityState.entityKey;\r\n\r\n        const diff = rfc6902.createPatch(currentEntityState, incomingEntityState);\r\n        rfc6902.applyPatch(currentEntityState, diff);\r\n    }\r\n}\r\n","\r\n// Sample entity state\r\nexport class CounterState\r\n{\r\n    title: string = '';\r\n\r\n    countContainer = {\r\n        count: 0\r\n    }\r\n\r\n    history: number[] = [];\r\n}","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { DurableEntitySet } from './common/DurableEntitySet';\r\nimport { CounterState } from './shared/CounterState';\r\n\r\n// Optional setup\r\nDurableEntitySet.setup({\r\n\r\n    // Setup with some fake user name. This is for testing purposes only.\r\n    // When deployed to Azure with EasyAuth configured, this name will be replaced with your real user name.\r\n    fakeUserNamePromise: Promise.resolve('test-anonymous-user'),\r\n\r\n    logger: { log: (l, msg: string) => console.log(msg) }\r\n});\r\n\r\nconst entityName = 'CounterEntity';\r\nconst entityKey = 'my-counter';\r\n\r\n// Creating a single CounterEntity and binding to its state\r\nconst counterState = DurableEntitySet.createEntity(entityName, entityKey, new CounterState());\r\n\r\n// Rendering that entity state\r\nexport const App = observer(\r\n    class App extends React.Component {\r\n        render(): JSX.Element {\r\n            return (<>\r\n                <div className=\"counter-div\">\r\n                    <h3> Title: '{counterState.title}', count: {counterState.countContainer?.count}</h3>\r\n                    <button onClick={() => DurableEntitySet.signalEntity(entityName, entityKey, 'add', 1)}>\r\n                        Increment\r\n                    </button>\r\n                    <button onClick={() => DurableEntitySet.signalEntity(entityName, entityKey, 'substract', 1)}>\r\n                        Decrement\r\n                    </button>\r\n                </div>\r\n                <h4>{counterState.history.length ? 'History (last 10 values):' : ''}</h4>\r\n                <ul>\r\n                    {counterState.history.map(n => (<li>{n}</li>))}\r\n                </ul>\r\n            </>);\r\n        }\r\n    }\r\n);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}