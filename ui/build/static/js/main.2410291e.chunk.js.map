{"version":3,"sources":["shared/common/SignalRNotifications.ts","common/DurableHttpClient.ts","shared/common/Constants.ts","common/DurableEntitySet.ts","shared/CounterState.ts","App.tsx","index.tsx"],"names":["EntityStateChangedMessage","entityName","entityKey","version","stateDiff","isEntityDestructed","msg","FormatEntityId","DurableHttpClient","_configFabric","NullLogger","instance","request","path","url","startsWith","split","slice","join","includes","process","config","this","accessTokenFactory","then","accessToken","headers","fakeUserNameFactory","fakeUserName","DefaultHttpClient","DurableEntitySet","_entityName","attachToAll","items","toLowerCase","makeObservable","observable","attachAllEntities","initSignalR","EntitySets","fetchAndApplyAllEntityStates","entityId","EntityStates","attachEntity","undefined","createEntity","signalName","argument","signalEntity","metadata","updateEntityMetadata","initialState","state","makeAutoObservable","fetchAndApplyEntityState","uri","HttpClient","post","content","JSON","stringify","Config","logger","entityState","entitySet","push","i","length","splice","desiredVersion","retryCount","currentEntityState","get","response","stateContainer","parse","Error","diff","rfc6902","entityAdded","catch","err","MaxRetryCount","setTimeout","RetryBaseIntervalMs","log","LogLevel","item","GetEntityId","Trace","entityDeleted","expectedVersion","SignalRConn","HubConnectionBuilder","withUrl","httpClient","build","on","entityStateChangedMessageHandler","onclose","tryToReconnect","Information","start","SignalRReconnectIntervalInMs","setup","Promise","resolve","l","console","counterState","title","countContainer","count","history","App","observer","className","onClick","map","n","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2410291e.chunk.js","sourcesContent":["import * as rfc6902 from 'rfc6902';\r\n\r\nexport class EntityStateChangedMessage {\r\n    \r\n    entityName: string = '';\r\n    entityKey: string = '';\r\n    version: number = 0;\r\n    stateDiff: rfc6902.Operation[] = [];\r\n    isEntityDestructed: boolean = false;\r\n\r\n    static GetEntityId(msg: EntityStateChangedMessage): string {\r\n        return EntityStateChangedMessage.FormatEntityId(msg.entityName, msg.entityKey);\r\n    }\r\n\r\n    static FormatEntityId(entityName: string, entityKey: string): string {\r\n        return `@${entityName}@${entityKey}`;\r\n    }\r\n}","import { DefaultHttpClient, HttpRequest, HttpResponse, NullLogger } from '@aspnet/signalr';\r\n\r\nimport { IDurableEntitySetConfig } from './IDurableEntitySetConfig';\r\nimport { ClientPrincipalHeaderName } from '../shared/common/Constants';\r\n\r\n// Custom HttpClient implementation for the purposes of DurableEntitySet\r\nexport class DurableHttpClient extends DefaultHttpClient {\r\n\r\n    constructor(private _configFabric: () => IDurableEntitySetConfig) {\r\n        super(NullLogger.instance);\r\n    }\r\n\r\n    send(request: HttpRequest): Promise<HttpResponse> {\r\n\r\n        // Applying custom config settings, but only when calling our backend\r\n\r\n        var path = request.url!;\r\n        if (path.startsWith('http')) {\r\n            path = '/' + path.split('/').slice(3).join('/');\r\n        }\r\n\r\n        if (path.includes(process.env.REACT_APP_BACKEND_BASE_URI!)) {\r\n\r\n            const config = this._configFabric();\r\n\r\n            if (!!config.accessTokenFactory) {\r\n                return config.accessTokenFactory().then(accessToken => {\r\n\r\n                    request.headers = {}\r\n                    request.headers['Authorization'] = 'Bearer ' + accessToken;\r\n\r\n                    return super.send(request);\r\n                });\r\n            }\r\n\r\n            if (!!config.fakeUserNameFactory) {\r\n                return config.fakeUserNameFactory().then(fakeUserName => {\r\n\r\n                    if (!!fakeUserName) {\r\n                        request.headers = {}\r\n                        request.headers[ClientPrincipalHeaderName] = fakeUserName;\r\n                    }\r\n\r\n                    return super.send(request);\r\n                });\r\n            }\r\n        }\r\n\r\n        return super.send(request);\r\n    }\r\n}\r\n","\r\nexport const SignalRClientHandlerName = \"entity-state-changed\";\r\n\r\nexport const ClientPrincipalHeaderName = 'x-ms-client-principal-name';\r\n\r\nexport const UpdateMetadataServiceMethodName = \"$update-entity-internal-metadata\";\r\n","import { makeAutoObservable, makeObservable, observable } from 'mobx';\r\nimport { HubConnectionBuilder, HubConnection, NullLogger, LogLevel } from '@aspnet/signalr';\r\nimport * as rfc6902 from 'rfc6902';\r\n\r\nimport { ISetEntityMetadataRequest } from '../shared/common/ISetEntityMetadataRequest';\r\nimport { EntityStateChangedMessage } from '../shared/common/SignalRNotifications';\r\nimport { SignalRClientHandlerName, UpdateMetadataServiceMethodName } from '../shared/common/Constants';\r\nimport { ClientStateContainer } from '../shared/common/ClientStateContainer';\r\nimport { IDurableEntitySetConfig } from './IDurableEntitySetConfig';\r\nimport { DurableHttpClient } from './DurableHttpClient';\r\n\r\nexport type EntityStateWithKey = { entityKey: string };\r\n\r\n// Client-side container for Durable Entities\r\nexport class DurableEntitySet<TEntityState extends object> {\r\n\r\n    // All attached entities will appear in this observable array\r\n    items: (TEntityState & EntityStateWithKey)[] = [];\r\n    \r\n    constructor(private _entityName: string, attachToAll: boolean = true) {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        this._entityName = this._entityName.toLowerCase();\r\n\r\n        makeObservable(this, { items: observable });\r\n        \r\n        if (attachToAll) {\r\n            this.attachAllEntities();\r\n        }\r\n    }\r\n\r\n    // Attach all entities of this type (that type you previously passed to ctor).\r\n    // Preloads all existing entities of this type and then automatically captures all newly created entities.\r\n    attachAllEntities(): void {\r\n\r\n        DurableEntitySet.initSignalR();\r\n\r\n        // Registering ourselves as listeners for this type of entity\r\n        DurableEntitySet.EntitySets[this._entityName] = this.items;\r\n\r\n        // Loading all existing entities\r\n        DurableEntitySet.fetchAndApplyAllEntityStates(this._entityName);\r\n    }\r\n\r\n    // Manually attach a single entity with specific key\r\n    attachEntity(entityKey: string): void {\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(this._entityName, entityKey);\r\n\r\n        if (!!DurableEntitySet.EntityStates[entityId]) {\r\n            return;\r\n        }\r\n\r\n        // Registering ourselves as listeners for this particular entity\r\n        DurableEntitySet.EntitySets[entityId] = this.items;\r\n        \r\n        DurableEntitySet.attachEntity(this._entityName, entityKey, undefined as any);\r\n    }\r\n\r\n    // Creates (or fetches existing) an entity\r\n    createEntity(entityKey: string): void {\r\n\r\n        DurableEntitySet.createEntity(this._entityName, entityKey, undefined as any);\r\n    }\r\n\r\n    // Sends a signal to the given entity\r\n    signalEntity(entityKey: string, signalName: string, argument?: any): Promise<void> {\r\n\r\n        return DurableEntitySet.signalEntity(this._entityName, entityKey, signalName, argument);\r\n    }\r\n\r\n    // Updates metadata of the given entity\r\n    updateEntityMetadata(entityKey: string, metadata: ISetEntityMetadataRequest): Promise<void> {\r\n\r\n        return DurableEntitySet.updateEntityMetadata(this._entityName, entityKey, metadata);\r\n    }\r\n\r\n    // Produces a single observable state instance for an existing entity\r\n    static attachEntity<TEntityState extends object>(entityName: string, entityKey: string, initialState: TEntityState): TEntityState {\r\n\r\n        DurableEntitySet.initSignalR();\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        entityName = entityName.toLowerCase();\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(entityName, entityKey);\r\n        if (!!this.EntityStates[entityId]) {\r\n            // If it is a known entity, then just returning it\r\n            return this.EntityStates[entityId].state as TEntityState;\r\n        }\r\n\r\n        if (!!initialState) {\r\n            makeAutoObservable(initialState);\r\n        }\r\n\r\n        // Try to asynchronously retrieve the state from server\r\n        this.fetchAndApplyEntityState(entityName, entityKey, 0, 0, initialState);\r\n\r\n        return initialState;\r\n    }\r\n\r\n    // Creates (or fetches existing) and produces a single observable state instance for a newly created entity\r\n    static createEntity<TEntityState extends object>(entityName: string, entityKey: string, initialState: TEntityState): TEntityState {\r\n\r\n        // This empty request will create the entity, if it doesn't exist yet.\r\n        this.updateEntityMetadata(entityName, entityKey, {});\r\n\r\n        return this.attachEntity(entityName, entityKey, initialState);\r\n    }\r\n\r\n    // Sends a signal to the given entity\r\n    static signalEntity(entityName: string, entityKey: string, signalName: string, argument?: any): Promise<void> {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        entityName = entityName.toLowerCase();\r\n\r\n        const uri = `${process.env.REACT_APP_BACKEND_BASE_URI}/entities/${entityName}/${entityKey}/${signalName}`;\r\n        return this.HttpClient.post(uri, { content: JSON.stringify(argument) }).then();\r\n    }\r\n\r\n    // Updates metadata of the given entity\r\n    static updateEntityMetadata(entityName: string, entityKey: string, metadata: ISetEntityMetadataRequest): Promise<void> {\r\n\r\n        return this.signalEntity(entityName, entityKey, UpdateMetadataServiceMethodName, metadata);\r\n    }\r\n\r\n    // Optionally setup with these optional settings\r\n    static setup(config: IDurableEntitySetConfig): void {\r\n        this.Config = config;\r\n        if (!this.Config.logger) {\r\n            this.Config.logger = NullLogger.instance;\r\n        }\r\n    }\r\n\r\n    private static Config: IDurableEntitySetConfig = { logger: NullLogger.instance };\r\n    private static HttpClient: DurableHttpClient = new DurableHttpClient(() => DurableEntitySet.Config);\r\n\r\n    private static EntitySets: { [entityName: string]: EntityStateWithKey[] } = {};\r\n    private static EntityStates: { [entityId: string]: ClientStateContainer } = {};\r\n    private static SignalRConn: HubConnection;\r\n\r\n    private static readonly SignalRReconnectIntervalInMs = 5000;\r\n    private static readonly MaxRetryCount = 6;\r\n    private static readonly RetryBaseIntervalMs = 500;\r\n\r\n    private static entityAdded(entityName: string, entityKey: string, entityState: EntityStateWithKey) {\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(entityName, entityKey);\r\n\r\n        // Searching for entitySet either for this particular entity or for this type of entity\r\n        var entitySet = this.EntitySets[entityId];\r\n        if (!entitySet) {\r\n            entitySet = this.EntitySets[entityName];\r\n        } else {\r\n            delete this.EntitySets[entityId];\r\n        }\r\n\r\n        if (!entitySet) {\r\n            return;\r\n        }\r\n\r\n        // Adding the entityKey property to the state object, to allow binding commands\r\n        entityState.entityKey = entityKey;\r\n        entitySet.push(entityState);\r\n    }\r\n\r\n    private static entityDeleted(entityName: string, entityKey: string) {\r\n\r\n        const entitySet = this.EntitySets[entityName];\r\n        if (!entitySet) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < entitySet.length; i++) {\r\n\r\n            if (entitySet[i].entityKey === entityKey) {\r\n                entitySet.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static fetchAndApplyEntityState(entityName: string, entityKey: string, desiredVersion: number, retryCount: number, currentEntityState: any = null): void {\r\n\r\n        const uri = `${process.env.REACT_APP_BACKEND_BASE_URI}/entities/${entityName}/${entityKey}`;\r\n        this.HttpClient.get(uri).then(response => {\r\n\r\n            const stateContainer = JSON.parse(response.content as string) as ClientStateContainer;\r\n            const entityId = EntityStateChangedMessage.FormatEntityId(entityName, entityKey);\r\n\r\n            if (!!desiredVersion && (stateContainer.version < desiredVersion)) {\r\n                throw new Error(`Expected ${entityId} of version ${desiredVersion}, but got version ${stateContainer.version}`);\r\n            }\r\n\r\n            if (!currentEntityState) {\r\n\r\n                // If there is no existing state, then using the newly arrived state object\r\n                currentEntityState = stateContainer.state;\r\n                makeAutoObservable(currentEntityState);\r\n                \r\n            } else {\r\n\r\n                // Otherwise applying the change to the existing object, so that UI is re-rendered\r\n                (stateContainer.state as any).entityKey = currentEntityState.entityKey; // Need to preserve the entityKey field, if it is set\r\n                const diff = rfc6902.createPatch(currentEntityState, stateContainer.state);\r\n                rfc6902.applyPatch(currentEntityState, diff);\r\n            }\r\n\r\n            if (!this.EntityStates[entityId]) {\r\n                \r\n                // Adding the newly-arrived state into collections, if any\r\n                this.entityAdded(entityName, entityKey, currentEntityState);\r\n            }\r\n\r\n            // (Re)registering this entity\r\n            this.EntityStates[entityId] = { state: currentEntityState, version: stateContainer.version };\r\n\r\n        }).catch(err => {\r\n\r\n            if (retryCount < this.MaxRetryCount) {\r\n\r\n                // Retrying\r\n                retryCount++;\r\n                setTimeout(() => {\r\n\r\n                    this.fetchAndApplyEntityState(entityName, entityKey, desiredVersion, retryCount, currentEntityState);\r\n\r\n                }, retryCount * this.RetryBaseIntervalMs);\r\n                \r\n            } else {\r\n\r\n                this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to fetch entity state: ${err}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    private static fetchAndApplyAllEntityStates(entityName: string): void {\r\n\r\n        const uri = `${process.env.REACT_APP_BACKEND_BASE_URI}/entities/${entityName}`;\r\n        this.HttpClient.get(uri).then(response => {\r\n\r\n            for (var item of JSON.parse(response.content as string)) {\r\n\r\n                const entityKey = item.entityKey;\r\n                const entityId = EntityStateChangedMessage.FormatEntityId(entityName, entityKey);\r\n                const stateContainer = item as ClientStateContainer;\r\n\r\n                makeAutoObservable(stateContainer.state);\r\n                this.EntityStates[entityId] = stateContainer;\r\n\r\n                // Adding the newly-arrived state into collections, if any\r\n                this.entityAdded(entityName, entityKey, stateContainer.state as any);\r\n            }\r\n\r\n        }).catch(err => {\r\n            this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to fetch entity states: ${err}`);\r\n        });\r\n    }\r\n\r\n    private static entityStateChangedMessageHandler(msg: EntityStateChangedMessage): void {\r\n\r\n        const entityId = EntityStateChangedMessage.GetEntityId(msg);\r\n\r\n        this.Config.logger!.log(LogLevel.Trace, `DurableEntitySet: ${entityId} changed to version ${msg.version}`);\r\n\r\n        if (msg.isEntityDestructed) {\r\n\r\n            delete this.EntityStates[entityId];\r\n\r\n            this.entityDeleted(msg.entityName, msg.entityKey);\r\n\r\n        } else if (!this.EntityStates[entityId]) {\r\n\r\n            // If anybody is attached to this entity or this type of entity\r\n            if (!!this.EntitySets[entityId] || !!this.EntitySets[msg.entityName]) {\r\n                \r\n                // This entity is not known to us yet, so just trying to fetch its state from server\r\n                setTimeout(() => this.fetchAndApplyEntityState(msg.entityName, msg.entityKey, msg.version, 0), this.RetryBaseIntervalMs);\r\n            }\r\n           \r\n        } else {\r\n\r\n            const expectedVersion = this.EntityStates[entityId].version + 1;\r\n            if (msg.version > expectedVersion) {\r\n                \r\n                // Missed some updates, so now need to reload the state from server\r\n                this.fetchAndApplyEntityState(msg.entityName, msg.entityKey, msg.version, 0, this.EntityStates[entityId].state);\r\n\r\n            } else if (msg.version === expectedVersion) {\r\n\r\n                // Applying the change\r\n                rfc6902.applyPatch(this.EntityStates[entityId].state, msg.stateDiff);\r\n                this.EntityStates[entityId].version = msg.version;\r\n            }            \r\n        }\r\n    }\r\n\r\n    private static initSignalR(): void {\r\n\r\n        if (!!this.SignalRConn) {\r\n            return;\r\n        }\r\n\r\n        // Configuring SignalR\r\n        this.SignalRConn = new HubConnectionBuilder()\r\n            .withUrl(`${process.env.REACT_APP_BACKEND_BASE_URI}`, { httpClient: this.HttpClient, logger: this.Config.logger })\r\n            .build();\r\n\r\n        // Mounting the event handler\r\n        this.SignalRConn.on(SignalRClientHandlerName, msg => this.entityStateChangedMessageHandler(msg));\r\n\r\n        // Background reconnects are essential here. That's because in 'Default' or 'Classic' service mode\r\n        // clients get forcibly disconnected, when your backend restarts.\r\n        this.SignalRConn.onclose(() => {\r\n            var tryToReconnect = () => {\r\n                this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: reconnecting to SignalR...`);\r\n                this.SignalRConn.start().then(() => {\r\n                    this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: reconnected to SignalR`);\r\n                }, () => {\r\n                    setTimeout(tryToReconnect, this.SignalRReconnectIntervalInMs);\r\n                })\r\n            }\r\n            tryToReconnect();\r\n        });\r\n\r\n        // Establishing SignalR connection\r\n        this.SignalRConn.start().then(\r\n            () => {\r\n                this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: successfully connected to SignalR`);\r\n            }, err => {\r\n                this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to connect to SignalR: ${err}`);\r\n            });\r\n    }\r\n}","\r\n// Sample entity state\r\nexport class CounterState\r\n{\r\n    title: string = '';\r\n\r\n    countContainer = {\r\n        count: 0\r\n    }\r\n\r\n    history: number[] = [];\r\n}","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { DurableEntitySet } from './common/DurableEntitySet';\r\nimport { CounterState } from './shared/CounterState';\r\n\r\n// Optional setup\r\nDurableEntitySet.setup({\r\n\r\n    // Setup with some fake user name. This is for testing purposes only.\r\n    // When deployed to Azure with EasyAuth configured, this name will be replaced with your real user name.\r\n    fakeUserNameFactory: () => Promise.resolve('test-anonymous-user'),\r\n\r\n    logger: { log: (l, msg: string) => console.log(msg) }\r\n});\r\n\r\nconst entityName = 'CounterEntity';\r\nconst entityKey = 'my-counter';\r\n\r\n// Creating a single CounterEntity and binding to its state\r\nconst counterState = DurableEntitySet.createEntity(entityName, entityKey, new CounterState());\r\n\r\n// Rendering that entity state\r\nexport const App = observer(\r\n    class App extends React.Component {\r\n        render(): JSX.Element {\r\n            return (<>\r\n                <div className=\"counter-div\">\r\n                    <h3> Title: '{counterState.title}', count: {counterState.countContainer?.count}</h3>\r\n                    <button onClick={() => DurableEntitySet.signalEntity(entityName, entityKey, 'add', 1)}>\r\n                        Increment\r\n                    </button>\r\n                    <button onClick={() => DurableEntitySet.signalEntity(entityName, entityKey, 'substract', 1)}>\r\n                        Decrement\r\n                    </button>\r\n                </div>\r\n                <h4>{counterState.history.length ? 'History (last 10 values):' : ''}</h4>\r\n                <ul>\r\n                    {counterState.history.map(n => (<li>{n}</li>))}\r\n                </ul>\r\n            </>);\r\n        }\r\n    }\r\n);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}